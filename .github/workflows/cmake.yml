name: 'CMake build'

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  # GitHub actions automatically zstd compresses caches
  CCACHE_NOCOMPRESS : true
  # 3GB; 10GB total for 4 compile jobs and conan data
  CCACHE_MAXSIZE : 3G
  SCCACHE_CACHE_SIZE : 3G

jobs:

  # --------------------------------- Linux ------------------------------------------
  Linux:
    name: Ubuntu Linux ${{ matrix.config.compiler }}
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        image:    [ ubuntu-24.04 ]
        os:       [ linux ]
        config:
        - {
            compiler:       "clang",
            cmake_preset:   "linux-clang-release",
          }
        - {
            compiler:       "gcc",
            cmake_preset:   "linux-gcc-release",
          }
        - {
            compiler:       "clang-libc++",
            cmake_preset:   "linux-clang-libc++-release",
            apt-pkgs:       "libc++-dev",
          }

    steps:

    - name: Trigger event
      run: |
        echo "Triggered by ${{ github.event_name }}"

    - name: Install basic dependencies
      # fail-safe check - only Ubuntu this days
      if: startsWith(matrix.image, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install --no-install-recommends -y cmake ninja-build ccache clang g++
        if [[ -n "${{ matrix.config.apt-pkgs }}" ]]; then
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y ${{ matrix.config.apt-pkgs }};
        fi

    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install Conan package manager
      id: conan2
      run: |
        pip --disable-pip-version-check --no-cache-dir install wheel conan

    - name: Cache Conan2 dependencies
      id: conan2-cache
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-conan-${{ matrix.config.compiler }}-${{ hashFiles('conanfile.py') }}
        path: |
          ~/.conan2
          build/conan

    - name: Check the state of installed dependencies by Conan2
      if: ${{ steps.conan2-cache.outputs.cache-hit != 'true' }}
      run: |
        if [[ -n "${{ matrix.config.apt-pkgs }}" ]]; then
          CXX=clang++ conan profile detect --force --name default
          sed -i ~/.conan2/profiles/default -E \
                  -e "s|^(compiler\.cppstd\s*)=(.*)$|\1=17|g" \
                  -e "s|^(compiler\.libcxx\s*)=(.*)$|\1=libc++|g"
          CXX=clang++ conan install . -s build_type=Release --output-folder build/conan --build=missing
        else
          conan profile detect --force --name default
          conan install . -s build_type=Release --output-folder build/conan --build=missing
        fi

    - name: Setup Github cache for compiler cache (ccache)
      uses: actions/cache@v4
      with:
        key: ${{ matrix.os }}-${{ matrix.config.compiler }}-ccache
        path: |
          ~/.config/ccache
          ~/.cache/ccache

    - name: Check CMake configure and build pre-conditions
      if: true
      run: |
        # env
        pwd
        echo "GITHUB_WORKSPACE = ${{ env.GITHUB_WORKSPACE }}"
        ls -alF  ~/.conan2
        ls -alFR build/conan

    - name: CMake configuration
      run: |
        cmake --preset ${{ matrix.config.cmake_preset }}

    - name: CMake build
      run: |
        cmake --build --preset ${{ matrix.config.cmake_preset }}

    - name: CCache statistics
      run: |
        ccache --show-stats

    - name: Run Unit Test
      run: |
        ctest --preset ${{ matrix.config.cmake_preset }}


  # --------------------------------- Windows ------------------------------------------
  Windows:
    name: Windows ${{ matrix.config.compiler }}
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        # https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md
        image:    [ windows-2022 ]
        os:       [ windows ]
        config:
        - {
            compiler:       "msvc",
            cmake_preset:   "windows-msvc-release",
            vcvars:         "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat",
          }
        - {
            compiler:       "clang",
            cmake_preset:   "windows-msvc-clang-release",
            vcvars:         "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat",
          }

    steps:

    - name: Trigger event
      run: |
        echo "Triggered by ${{ github.event_name }}"

    - name: Install basic dependencies on ${{matrix.os}}
      run: |
        choco install cmake ninja

    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install conan package manager
      id: conan2
      run: |
        pip --disable-pip-version-check --no-cache-dir install wheel conan

    - name: Cache Conan2 dependencies
      id: conan2-cache
      uses: actions/cache@v4
      with:
        key: ${{ matrix.os }}-conan-${{ matrix.config.compiler }}-${{ hashFiles('conanfile.py') }}
        path: |
          C:\\Users\\runneradmin\\.conan2

    - name: Check the state of installed dependencies by Conan2
      # if: ${{ steps.conan2-cache.outputs.cache-hit != 'true' }}
      run: |
        conan profile detect --force --name default
        conan install . --settings=compiler.cppstd=17 -s build_type=Release --output-folder build/conan --build=missing

    - name: Run Mozilla sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.6
      env:
        SCCACHE_GHA_ENABLED: "true"

    - name: Check CMake configure and build pre-conditions
      if: true
      shell: cmd
      run: |
        rem env
        echo %cd%
        dir
        rem dir /s /b C:\\Users\\runneradmin\\.conan2
        rem dir /s /b build\\conan

    - name: CMake configuration
      shell: cmd
      run: |
        call "${{ matrix.config.vcvars }}"
        cmake --preset ${{ matrix.config.cmake_preset }}

    - name: CMake build
      shell: cmd
      run: |
        call "${{ matrix.config.vcvars }}"
        cmake --build --preset ${{ matrix.config.cmake_preset }}

    - name: Run Unit Test
      run: |
        ctest --preset ${{ matrix.config.cmake_preset }}

  # ----------------------------------- macOS ----------------------------------------
  macOS:
    name: macOS ${{ matrix.config.compiler }}
    runs-on: ${{ matrix.image }}
    #if: false # always skip job
    strategy:
      fail-fast: false
      matrix:
        # https://github.com/actions/runner-images/blob/main/images/macos/macos-15-Readme.md
        image:    [ macos-15 ]
        os:       [ macos ]
        config:
        - {
            compiler:       "clang",
            cmake_preset:   "macos-clang-release",
          }

    steps:

    - name: Trigger event
      run: |
        echo "Triggered by ${{ github.event_name }}"

    - name: Install basic dependencies
      # [macOS15](
      #  https://github.com/actions/runner-images/blob/main/images/macos/macos-15-Readme.md)
      run: |
        brew update
        brew install ninja
        # set the path to homebrew's LLVM
        echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH

    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install conan package manager
      id: conan2
      # cope with [PEP 668 – Marking Python base environments as “externally managed”](
      #  https://peps.python.org/pep-0668/).
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        pip3 --disable-pip-version-check --no-cache-dir install wheel conan
        deactivate

    - name: Cache Conan2 dependencies
      id: conan2-cache
      uses: actions/cache@v4
      with:
        key: ${{ matrix.os }}-conan-${{ matrix.config.compiler }}-${{ hashFiles('conanfile.py') }}
        path: |
          ~/.conan2

    - name: Check the state of installed dependencies by Conan2
      # if: ${{ steps.conan2-cache.outputs.cache-hit != 'true' }}
      run: |
        source .venv/bin/activate
        conan profile detect --force --name default
        conan install . --settings=compiler.cppstd=17 -s build_type=Release --output-folder build/conan --build=missing
        deactivate

    - name: Run Mozilla sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.6
      env:
        SCCACHE_GHA_ENABLED: "true"

    - name: Check CMake configure and build pre-conditions
      if: true
      shell: bash
      run: |
        # env
        pwd
        ls -alF .
        echo ${{ env.GITHUB_WORKSPACE }}
        ls -alF  ~/.conan2
        # ls -alF build/conan

    - name: CMake configuration
      run: |
        cmake -DCMAKE_CXX_COMPILER=clang++ --preset ${{ matrix.config.cmake_preset }}

    - name: CMake build
      run: |
        cmake --build --preset ${{ matrix.config.cmake_preset }}

    - name: Run Unit Test
      run: |
        ctest --preset ${{ matrix.config.cmake_preset }}
