name: 'Python Lint'

on:
  push:
    branches: [ main ]
  pull_request:
    branches:
    - '**'
  workflow_dispatch:

jobs:

  autopep8:
    # Check if the PR is not raised by this workflow
    if: startsWith(github.head_ref, 'autopep8-patches') == false
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}    

    - name: Gather Python files from git
      run: |
        echo "PYTHON_FILES=$(git ls-files '*.py')" >> $GITHUB_ENV
    
    - name: autopep8
      id: autopep8
      uses: peter-evans/autopep8@v1
      with:
        args: --exit-code --recursive --in-place --aggressive --aggressive ${{ env.PYTHON_FILES }}

    - name: Set autopep8 branch name
      id: vars
      run: |
        echo ::set-output name=branch-name::"autopep8-patches/${{ github.head_ref }}"
      
    - name: Create Pull Request
      # ... also check if the PR is not from a fork
      if: steps.autopep8.outputs.exit-code == 2 && github.event.pull_request.head.repo.full_name == github.repository
      uses: peter-evans/create-pull-request@v6
      id: cpr      
      with:
        commit-message: autopep8 action fixes
        title: Fixes by autopep8 action
        body: This is an auto-generated PR with fixes by autopep8.
        labels: |
          autopep8
          automated pr
        branch: ${{ steps.vars.outputs.branch-name }}

    - name: Check outputs
      if: ${{ steps.cpr.outputs.pull-request-number }}
      run: |
        echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
        echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"        
        
    - name: Fail if autopep8 made changes
      if: steps.autopep8.outputs.exit-code == 2
      run: exit 1
      
  pylint:
    runs-on: ubuntu-latest
    env:
      # threshold to decide if the test was successful
      PYLINT_THRESHOLD_FAIL: 4  # [0 ... 10.0]

    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Gather Python files from git
      run: |
        echo "PYTHON_FILES=$(git ls-files '*.py')" >> $GITHUB_ENV
    
    - name: Show files to lint
      run: |
        echo "Python: ${{ env.PYTHON_FILES }}"

    - name: Format Python code using black
      if: false # disable since there is no PR
      run: |
        python -m pip install --upgrade pip
        pip --disable-pip-version-check --no-cache-dir install wheel black
        black ${{ env.PYTHON_FILES }}

    - name: Analyzing the Python code
      uses: ricardochaves/python-lint@v1.4.0
      with:
        python-root-list: "${{ env.PYTHON_FILES }}"
        use-pylint: true
        use-pycodestyle: true
        use-flake8: true
        use-black: false
        use-isort: true
        use-mypy: true
        extra-pylint-options: "--fail-under ${{env.PYLINT_THRESHOLD_FAIL}}"
        extra-pycodestyle-options: ""
        extra-flake8-options: ""
        extra-black-options: ""
        extra-isort-options: ""
        extra-mypy-options: ""
